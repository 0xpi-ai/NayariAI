# Handle all domains on HTTP first (for ACME challenges)
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    # Allow ACME challenge for all domains
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /var/www/certbot;
        allow all;
    }

    # For all other requests, redirect to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Main website HTTPS (nayari.ai and www.nayari.ai)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name nayari.ai www.nayari.ai;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/nayari.ai/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/nayari.ai/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/nayari.ai/chain.pem;

    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1000;

    root /usr/share/nginx/html;
    index index.html;

    # Static files
    location /assets/ {
        try_files $uri $uri/ =404;
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # Client application
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Error page
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }

    # Security: deny access to . files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# API subdomain HTTPS (api.nayari.ai)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.nayari.ai;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/nayari.ai/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/nayari.ai/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/nayari.ai/chain.pem;

    # API server
    location / {
        resolver 127.0.0.11 ipv4=on;
        set $upstream_agent agent;
        proxy_pass http://$upstream_agent:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' '*' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' '*' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Increase timeouts for long-running requests
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }
}